Total before late penalty: [85/110]

NOTE: in the marking report something left blank (e.g.  [ /6]) typically means
that you got full marks for that item.

[x] means that you got full marks for this sub item.
[-] means that you got partial marks for this sub item.

CLIENT - FUNCTIONALITY: [67/90]

[3/3] Code compiles without warnings
[2/2] Working makefile produces the JAR file

[10/10] DictionaryConnection constructor
     - [x] Creates socket and initializes streams
     - [x] Properly sends exceptions if server doesn't exist or respond
     - [x] Properly sends exceptions if first status is not number, or not 220

[3/5] close method
     - [x] Sends QUIT command
     - [x] Optional: reads status response from QUIT
     - [ ] Closes socket
     - [x] Ignores any exception from closing exception

- Comment:

Your code does not close the socket when the server replys a status code other than 221.
You should not quit the entire program when the user disconnects from a server.

[14/20] getDefinitions method
     - [x] sends DEFINE command properly with word and database
     - [ ] checks if initial status code is correct
     - [ ] keeps reading definitions until status is no longer 151
     - [-] properly returns empty set if status indicates no definition
     - [ ] properly returns set of definitions if successful status
     - [-] creates definition with proper word (from status) and database (from map)
     - [x] appends definition with text up until (not including) period
     - [x] properly handles words with spaces
     - [x] follows the proper sequence of reads instead of just reading until a 151/2xx is read
     - [x] properly sends exception if connection is interrupted

- Comments:

(1)
You cannot assume that no definitions presents if a line contains 552.
e.g. Your code does not work when `150: 552 matches present` is returned by the server.

(2)
Your code creates new databases instead of retrieving existing instances from the map.

(3)
Your while loop keeps running and will be blocked (due to input.readLine()) when the last status code is not 250.

(4)
You cannot simply check whether a line contains 151 or not.
Your code does not work if the definition body contains the string 151.

[15/20] getMatchList method
      - [x] sends MATCH command properly with word, database and strategy
      - [ ] checks if initial status is correct
      - [ ] keeps reading matches until (not including) period
      - [-] properly returns empty set if status indicates no match
      - [x] properly returns set of matches if successful status
      - [x] handles parameter word with spaces
      - [x] handles retrieved word with spaces
      - [x] follows the proper sequence of reads instead of just reading until a 2xx is read.
      - [x] properly sends exception if connection is interrupted

- Comments:

(1)
You cannot assume that no matches presents if a line contains 552.
e.g. Your code does not work when `152: 552 matches present` is returned by the server.

(2)
Your while loop will be blocked (due to input.readLine()) when the last status code is not 250.

(3)
Similar issues for other status codes.
You have to parse the response and check whether it starts with a specific code.

(4)
Your code does not work and may trigger an index-out-of-bound exception when the server response is malformed.

(5)
You should not check whether the response contains a partial string. You should parse the response and check against the status code.

[10/15] getDatabaseList method
     - [x] sends SHOW DB command properly
     - [ ] checks if initial status is correct
     - [ ] keeps reading databases until (not including) period
     - [-] properly returns empty set if status indicates no database
     - [x] properly returns set of databases if successful status
     - [x] follows the proper sequence of reads instead of just reading until a 2xx is read.
     - [x] properly sends exception if connection is interrupted.

- Comments:

(1)
You cannot assume that a database presents if a line contains spaces.

(2)
Your code does not work and may trigger an index-out-of-bound exception when the server response is malformed.

(3)
Your while loop will be blocked (due to input.readLine()) when the last status code is not 250.

(4)
You cannot assume that no database presents if a line contains 554.
e.g. Your code does not work when `110: 554 databases present` is returned by the server.

(5)
Similar issues for other status codes.
You have to parse the response and check whether it starts with a specific code.

[10/15] getStrategyList method
     - [x] sends SHOW STRAT command properly
     - [ ] checks if initial status is correct
     - [ ] keeps reading databases until (not including) period
     - [-] properly returns empty set if status indicates no strategy
     - [x] properly returns set of strategies if successful status
     - [x] follows the proper sequence of reads instead of just reading until a 2xx is read.
     - [x] properly sends exception if connection is interrupted.

- Comments:

Same issue as getDatabaseList().

---------------------
PROGRAM STRUCTURE AND STYLE: [18/20]

   * Easy to read, appropriate layout, lines aren't too long, blank
     lines delineating blocks of code functionality. (Basically
     does it look good and is easy to read.)  [3/3]

   * Blocks of code commented. Is it clear what functionality each
     block of code is responsible for? Is it clear what variables are
     being used for?  Is it easy to determine the underlying state
     machine.     [3/3]

   * Code is decomposed into methods. There shouldn't be long
     blocks of code or repeated code. [1/3]

   * Reasonable choice of algorithms and problem solving approach
     (for example doesn't read all of the output from the server
      before pritning it.)              [4/4]

   * Regular use of git to push changes to stash. [2/2]

   * Marker's discretion   [5/5]


MARKER'S ADDITIONAL COMMENTS:

- Some parts of your code are highly repeated logically.
  The methods you are required to implement have some features in common.
  For example, they all have to read status lines from the socket.
  So there could be a helper to parse the status line and check against the expected status code.

  For getMatchingList(), getDatabases() and getStrategies() methods, they all have the same structure in the response.
  And it is possible to add a small parser helper to parse the list in the response.